<?php
use Drupal\Views\ViewExecutable;
use Drupal\file\Entity\File;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\HeaderBag;

/**
 * @todo this needs to be removed and tested
 */
global $base_url;


/**
 *
 *
 *  Theme alter hooks
 *
 */
/**
 *  Implements hook_theme_suggestions_HOOK_alter() for html templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function purencool_vision_theme_suggestions_html(array &$suggestions, array $variables) {
  // $template_suggestions = array();
  //$template_suggestions[] = 'html__testing';
  // return $template_suggestions;
}


/**
 *  Implements hook_theme_suggestions_HOOK_alter() for canonical templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function purencool_vision_theme_suggestions_canonical(array &$suggestions, array $variables) {
  $access_content_type = _purencool_vision_access_content_type();
  if ($access_content_type != NULL) {
    $suggestions[] = 'page__' . $access_content_type;
  }
}

/**
 *  Implements hook_theme_suggestions_HOOK_alter() for region templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function purencool_vision_theme_suggestions_region_alter(array &$suggestions, array $variables) {
  $access_content_type = _purencool_vision_access_content_type();
  if ($access_content_type != NULL) {
    $suggestions[] = 'region__content__' . $access_content_type;
  }
}


/**
 *  Implements hook_theme_suggestions_HOOK_alter() for page templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function purencool_vision_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__' . $node->getType());
  }
  if (\Drupal::routeMatch()->getRouteName() == 'blog') {
    $suggestions[] = 'page__blog';
  }
}


/**
 *  Implements hook_theme_suggestions_HOOK_alter() for node templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function purencool_vision_theme_suggestions_node_alter(array &$suggestions, array $variables) {

  if (isset($variables['elements']['#node'])) {
    $node = $variables['elements']['#node'];
    $suggestions[] = 'node__' . $variables['elements']['#view_mode'];
    $suggestions[] = 'node__' . $node->bundle() . '__' . $variables['elements']['#view_mode'];
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function purencool_vision_theme_suggestions_block_alter(array &$suggestions, array $variables) {

  if (isset($variables['elements']['content']['#block_content'])) {
    $view_mode = $variables['elements']['content']['#view_mode'];
    $block_id = $variables['elements']['content']['#block_content']->bundle();
    array_splice($suggestions, 1, 0, 'block__bundle__' . $view_mode . '__' . $block_id);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function purencool_vision_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

  if (isset($variables['view'])) {
    $view_id = $variables['view']->id();
    $view_block = $variables['view']->getDisplay()->display['id'];
    array_splice($suggestions, 1, 0, 'views_view_' . $view_id . '__' . $view_block);
  }
}


/**
 *  Implements hook_theme_suggestions_HOOK_alter() for taxonomy term templates.
 *
 * @param $suggestions
 * @param $variables
 */
function purencool_vision_theme_suggestions_taxonomy_term_alter(&$suggestions, $variables) {
  $elements = $variables['elements'];

  if (isset($elements['#taxonomy_term']) && isset($elements['#theme']) && isset($elements['#view_mode'])) {
    $term = $elements['#taxonomy_term'];

    if (is_object($term)) {
      $suggestions[] = $elements['#theme'] . '__' . $term->getVocabularyId() . '__' . $elements['#view_mode'];
      $suggestions[] = $elements['#theme'] . '__' . $term->id() . '__' . $elements['#view_mode'];
    }
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function purencool_vision_theme_suggestions_form_alter(array &$suggestions, array $variables) {

  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#form_id'];
    $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-', '_', $variables['element']['#id']);
  }


  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  if (strpos($variables['element']['#form_id'], 'views_exposed_form') !== FALSE) {
    $suggestions[] = 'form__views_exposed_form';
  }
  if ($variables['element']['#form_id'] == 'user_login_form') {
    $suggestions[] = 'form__user_login_form';
  }
  if ($variables['element']['#form_id'] == 'user_register_form') {
    $suggestions[] = 'form__user_register_form';
  }
  if ($variables['element']['#form_id'] == 'user_pass') {
    $suggestions[] = 'form__user_pass_form';
  }
  if (strpos($variables['element']['#form_id'], 'uc_product_add_to_cart_form') !== FALSE) {
    $suggestions[] = 'form__add_to_cart';
  }
}


/**
 *  Implements hook_theme_suggestions_HOOK_alter() for form input templates.
 *
 * @param array $suggestions
 * @param array $variables
 */
function pnc_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#parents'])) {
    $suggestions[] = 'input__' . $variables['element']['#parents'][0];
  }

}

/**
 *  Implements hook_theme_suggestions_HOOK_alter() for yamlform templates.
 * @param array $suggestions
 * @param array $variables
 */
function purencool_vision_theme_suggestions_yamlform_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'yamlform_submission__purencool_vision_contact_form_form') {
    $suggestions[] = 'yamlform__contact_form';
  }
}

/**
 *
 *  End of theme alter hooks
 *
 */


/**
 *
 *  Preprocessor hooks
 *
 */

/**
 * Implements hook_preprocess().
 */
function purencool_vision_preprocess(&$variables) {

  //Set variables for theme
  $variables['base_path'] = base_path();
  $variables['custom_css'] = theme_get_setting('custom_css', 'purencool_vision');
  $variables['tracking_code'] = theme_get_setting('tracking_code', 'purencool_vision');
  //Get menu style
  $variables['menu_style'] = theme_get_setting('menu_style', 'purencool_vision');
  //Get Footer style
  $variables['footer_style'] = theme_get_setting('footer_style', 'purencool_vision');
  //Get Footer copyright message
  $variables['footer_copyright_message'] = theme_get_setting('footer_copyright_message', 'purencool_vision');
  //Get variables blog settings
  $variables['blog_layout'] = theme_get_setting('blog_layout', 'purencool_vision');
  $variables['blog_menu_style'] = theme_get_setting('blog_menu_style', 'purencool_vision');
  $variables['blog_style'] = theme_get_setting('blog_style', 'purencool_vision');
  $variables['blog_page_header_class'] = theme_get_setting('blog_page_header_class', 'purencool_vision');
  $variables['blog_page_header_bgcolor'] = theme_get_setting('blog_page_header_bgcolor', 'purencool_vision');
  $blog_page_title_bgimage = theme_get_setting('blog_page_title_bgimage', 'purencool_vision');
  if ($blog_page_title_bgimage) {
    $file = File::load($blog_page_title_bgimage[0]);
    $path = file_create_url($file->getFileUri());
    $variables['blog_page_title_bgimage'] = $path;
  }
  else {
    $variables['blog_page_title_bgimage'] = '';
  }
  $variables['blog_footer_layout'] = theme_get_setting('blog_footer_layout', 'purencool_vision');
  $variables['blog_slogan'] = theme_get_setting('blog_slogan', 'purencool_vision');
  //Get Portfolio setting
  $variables['portfolio_layout'] = theme_get_setting('portfolio_layout', 'purencool_vision');
  $variables['portfolio_menu_style'] = theme_get_setting('portfolio_menu_style', 'purencool_vision');
  $variables['portfolio_page_header_class'] = theme_get_setting('portfolio_page_header_class', 'purencool_vision');
  $variables['portfolio_page_header_bgcolor'] = theme_get_setting('portfolio_page_header_bgcolor', 'purencool_vision');
  $portfolio_page_title_bgimage = theme_get_setting('portfolio_page_title_bgimage', 'purencool_vision');
  if ($portfolio_page_title_bgimage) {
    $file = File::load($portfolio_page_title_bgimage[0]);
    $path = file_create_url($file->getFileUri());
    $variables['portfolio_page_title_bgimage'] = $path;
  }
  else {
    $variables['portfolio_page_title_bgimage'] = '';
  }
  $variables['portfolio_slogan'] = theme_get_setting('portfolio_slogan', 'purencool_vision');
  $variables['portfolio_style'] = theme_get_setting('portfolio_style', 'purencool_vision');
  $variables['portfolio_footer_style'] = theme_get_setting('portfolio_footer_style', 'purencool_vision');
  //Get variables page settings
  $variables['page_menu_style'] = theme_get_setting('page_menu_style', 'purencool_vision');
  $variables['pagetitle_header_class'] = theme_get_setting('page_header_class', 'purencool_vision');
  $variables['pagetitle_header_bgcolor'] = theme_get_setting('page_header_bgcolor', 'purencool_vision');
  $system_page_title_bgimage = theme_get_setting('system_page_title_bgimage', 'purencool_vision');
  if ($system_page_title_bgimage) {
    $file = File::load($system_page_title_bgimage[0]);
    $path = file_create_url($file->getFileUri());
    $variables['page_title_bgimage'] = $path;
  }
  else {
    $variables['page_title_bgimage'] = '';
  }
  $variables['page_footer_layout'] = theme_get_setting('page_footer_layout', 'purencool_vision');
  $variables['pagetitle_slogan'] = theme_get_setting('page_slogan', 'purencool_vision');
  //Get variables page 404
  $variables['page404_menu_style'] = theme_get_setting('page404_menu_style', 'purencool_vision');
  $page404_logo = theme_get_setting('page404_logo', 'purencool_vision');
  if ($page404_logo) {
    $file = File::load($page404_logo[0]);
    $path = file_create_url($file->getFileUri());
    $variables['page404_logo'] = $path;
  }
  else {
    $variables['page404_logo'] = '';
  }
  $variables['page404_footer_style'] = theme_get_setting('page404_footer_style', 'purencool_vision');
  $variables['page404_messages'] = theme_get_setting('page404_messages', 'purencool_vision');
  $page404_background_image = theme_get_setting('page404_background_image', 'purencool_vision');
  if ($page404_background_image) {
    $file = File::load($page404_background_image[0]);
    $path = file_create_url($file->getFileUri());
    $variables['page404_background_image'] = $path;
  }
  else {
    $variables['page404_background_image'] = '';
  }
  //Get variables page shop
  $variables['shop_layout'] = theme_get_setting('shop_layout', 'purencool_vision');
  $variables['shop_menu_style'] = theme_get_setting('shop_menu_style', 'purencool_vision');
  $variables['shop_header_class'] = theme_get_setting('shop_header_class', 'purencool_vision');
  $variables['shop_slogan'] = theme_get_setting('shop_slogan', 'purencool_vision');
  $variables['shop_header_bgcolor'] = theme_get_setting('shop_header_bgcolor', 'purencool_vision');
  $shop_page_title_bgimage = theme_get_setting('shop_page_title_bgimage', 'purencool_vision');
  if ($shop_page_title_bgimage) {
    $file = File::load($shop_page_title_bgimage[0]);
    $path = file_create_url($file->getFileUri());
    $variables['shop_page_title_bgimage'] = $path;
  }
  else {
    $variables['shop_page_title_bgimage'] = '';
  }
  $variables['shop_footer_layout'] = theme_get_setting('shop_footer_layout', 'purencool_vision');
  $uid = \Drupal::currentUser()->id();
  $variables['uid'] = $uid;
}


/**
 * Implements hook_preprocess().
 */
function purencool_vision_preprocess_html(&$variables) {
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['content_type'] = implode('-',explode('_',$node->getType()));
  }

  $variables['html_custom_id'] = _purencool_vision_get_url_path('h');
}


/**
 * Implements hook_preprocess().
 */
function purencool_vision_preprocess_maintenance_page(&$variables) {
  $maintenance_mode = \Drupal::state()->get('system.maintenance_mode');
  if (!empty($maintenance_mode)) {
    $variables['head_title'] = \Drupal::config('system.site')->get('name');;
  }
}


/**
 * Implements hook_preprocess().
 */
function purencool_vision_preprocess_page(&$vars) {
  global $base_url;
  $vars['logo'] = $base_url . '/' . drupal_get_path('theme', 'purencool_vision') . '/logo.svg';
  $vars['logo'] = str_replace('.svg', '.png', $vars['logo']);

  if (($node = \Drupal::routeMatch()
      ->getParameter('node')) && $node instanceof \Drupal\node\NodeInterface
  ) {
    $vars['node_title'] = $node->title->value;
  }
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $page_title = \Drupal::service('title_resolver')
    ->getTitle($request, $route_match->getRouteObject());
  $vars['current_page_title'] = $page_title;


  //-- giving template custom id
  $vars['page-custom-id'] = _purencool_vision_get_url_path('p');
}


/**
 * Implements hook_preprocess().
 */
function purencool_vision_preprocess_node(&$vars) {
  // Getting the node creation time stamp from the node object.
  $date = $vars['node']->getCreatedTime();
  // Here you can use drupal's format_date() function, or some custom PHP date formatting.
  $vars['node_date'] = \Drupal::service('date.formatter')
    ->format($date, 'd F Y, G:i');
  $vars['counter_row'] = 0;

  //-- giving template custom id
  $vars['node_custom_id'] = _purencool_vision_get_url_path('n');
}

/**
 * Implements hook_preprocess().
 */
function purencool_vision_preprocess_breadcrumb(&$variables) {
  $request = \Drupal::request();
  if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
    $current_title = \Drupal::service('title_resolver')
      ->getTitle($request, $route);
  }
  else {
    $current_title = '';
  }
  if (($node = \Drupal::routeMatch()
      ->getParameter('node')) && $variables['breadcrumb']
  ) {
    if ($node->getTitle() == $current_title) {
      $variables['breadcrumb'][] = array(
        'text' => $node->getTitle(),
        'url' => ''
      );
    }
    else {
      $variables['breadcrumb'][] = array(
        'text' => $node->getTitle(),
        'url' => $node->URL()
      );
    }
  }
  elseif ($variables['breadcrumb']) {
    $variables['breadcrumb'][] = array(
      'text' => $current_title,
      'url' => ''
    );
  }
}

function purencool_vision_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'system_branding_block':
      $variables['site_logo'] = '';
      if ($variables['content']['site_logo']['#access'] && $variables['content']['site_logo']['#uri']) {
        $variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
      }
      break;
  }
  if (!empty($variables['elements']['#id'])) {
    $block = entity_load('block', $variables['elements']['#id']);
    $region = $block->getRegion();
    $variables['block_region'] = $region;
  }
  //-- giving template custom id

  $variables['section_custom_id'] = _purencool_vision_get_url_path('b', str_replace(':', '', implode('-', explode('_', $variables['plugin_id']))));
}


/**
 * Implements hook_preprocess().
 */
function purencool_vision_preprocess_comment(&$variables) {
  $comment = $variables['elements']['#comment'];
  $variables['comment_created'] = format_date($comment->created->value, "custom", "d M Y, G:iA");
}


/**
 * Implements hook_preprocess().
 */
function purencool_vision_preprocess_views_view_field(&$variables) {
  $variables['view_counter'] = 0;
}


/**
 *
 *  End of preprocessor hooks
 *
 */

/**
 *
 *  Form alter hooks
 *
 */
/**
 * Implements hook_theme().
 */
function  purencool_vision_theme($existing, $type, $theme, $path) {
  return [
    'contact_message_contact_form' => [
      'path' => $path . '/templates/forms/contact',
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function purencool_vision_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  //-- global overrides for the form
 
  if($form_id == "views_exposed_form"){
    $keyFromForm = key($form['#info']);
    if (isset($keyFromForm)) {
      $exposedValue = $form['#info'][$keyFromForm]['label'];
      $exposedKey = $form['#info'][$keyFromForm]['value'];
      $form[$exposedKey]['#attributes']['placeholder'] = t( $exposedValue);
    }
  }
  
  if (isset ($form['name']) && $form['name']['#type'] == 'textfield') {
    $form['name']['#attributes']['placeholder'][] = t('NAME');
    unset ($form['name']['#title']);
  }

  if (isset ($form['mail']) && $form['mail']['#type'] == 'email') {
    $form['mail']['#attributes']['placeholder'][] = t('EMAIL');
    unset ($form['mail']['#title']);
  }

  if (isset ($form['subject']['widget'])) {
    $form['subject']['widget'][0]['value']['#attributes']['placeholder'][] = t('ORGANIZATION');
    unset ($form['subject']['widget'][0]['value']['#title']);
  }

  if (isset ($form['field_phone']['widget'])) {
    $form['field_phone']['widget'][0]['value']['#attributes']['placeholder'][] = t('PHONE');
    unset ($form['field_phone']['widget'][0]['value']['#title']);
  }
  if (isset ($form['message']['widget'])) {
    $form['message']['widget'][0]['value']['#attributes']['placeholder'][] = t('MESSAGE');
    unset ($form['message']['widget'][0]['value']['#title']);
  }

  if (strpos($form_id, 'contact_message_contact_form') !== FALSE) {
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-dm';
  }




  if ($form_id == 'search_form') {
    //print_r($form);
    $form['basic']['keys']['#attributes']['placeholder'] = 'Enter your keywords';
    $form['basic']['keys']['#attributes']['class'][] = 'form-control';
    $form['actions']['submit']['#prefix'] = '<div class="form-group">';
    $form['actions']['submit']['#suffix'] = '</div>';
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-dm';
  }
  if (strpos($form_id, 'simplenews_subscriptions_block') !== FALSE) {
    $form['actions']['subscribe']['#attributes']['class'][] = 'btn btn-sb uppercase';
    $form['mail']['widget'][0]['value']['#attributes']['class'][] = 'form-control email';
    $form['mail']['widget'][0]['value']['#attributes']['placeholder'] = 'ENTER YOUR EMAIL';
    $form['mail']['widget'][0]['value']['#description'] = FALSE;
    //print_r($form['mail']['widget'][0]['value']);
  }
  if ($form_id == 'simplenews_subscriptions_block_970d7c7a-7f20-4cbc-9634-249178129dcb') {
    $form['actions']['subscribe']['#attributes']['class'][] = 'btn btn-primary';
    $form['actions']['subscribe']['#value'] = 'SUBSCRIBE !';
    $form['actions']['subscribe']['#prefix'] = '<span class="input-group-btn"><i class="fa fa-cog fa-spin subscribe-icon"></i>';
    $form['actions']['subscribe']['#suffix'] = '</span>';
    $form['mail']['widget'][0]['value']['#title'] = FALSE;
    $form['mail']['widget'][0]['value']['#description'] = FALSE;
    $form['mail']['widget'][0]['value']['#attributes']['class'][] = 'form-control';
    //print_r($form['mail']['widget'][0]['value']);
  }

  if ($form['#id'] == 'user-login-form') {
    $form['name']['#prefix'] = '<div class="form-group">';
    $form['name']['#suffix'] = '</div>';
    $form['name']['#description'] = FALSE;
    $form['name']['#attributes']['class'][] = 'form-control';
    $form['name']['#title'] = FALSE;
    $form['name']['#attributes']['placeholder'] = 'Username';
    $form['pass']['#prefix'] = '<div class="form-group">';
    $form['pass']['#suffix'] = '</div>';
    $form['pass']['#description'] = FALSE;
    $form['pass']['#attributes']['class'][] = 'form-control';
    $form['pass']['#attributes']['placeholder'] = 'Password';
    $form['pass']['#title'] = FALSE;
    $form['actions']['submit']['#value'] = t("Log in");
    $form['actions']['submit']['#prefix'] = '<div class="form-group">';
    $form['actions']['submit']['#suffix'] = '</div>';
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-login';
  }
  if ($form['#id'] == 'user-register-form') {
    //print_r($form['actions']);
    $form['account']['mail']['#prefix'] = '<div class="form-group">';
    $form['account']['mail']['#suffix'] = '</div>';
    $form['account']['mail']['#attributes']['class'][] = 'form-control';
    $form['account']['mail']['#title'] = FALSE;
    $form['account']['mail']['#attributes']['placeholder'] = 'Email';
    $form['account']['name']['#description'] = FALSE;
    $form['account']['name']['#title'] = FALSE;
    $form['account']['name']['#attributes']['placeholder'] = 'Username';
    $form['account']['name']['#prefix'] = '<div class="form-group">';
    $form['account']['name']['#suffix'] = '</div>';
    $form['account']['name']['#attributes']['class'][] = 'form-control';
    $form['account']['mail']['#title'] = FALSE;
    $form['account']['mail']['#description'] = FALSE;
    $form['actions']['submit']['#prefix'] = '<div class="form-group">';
    $form['actions']['submit']['#suffix'] = '</div>';
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-login';
    $form['actions']['submit']['#value'] = t("Submit");
    $form['field_display_name']['widget'][0]['#prefix'] = '<div class="form-group">';
    $form['field_display_name']['widget'][0]['#suffix'] = '</div>';
    $form['field_display_name']['widget'][0]['value']['#attributes']['class'][] = 'form-control';
  }
  if ($form['#id'] == 'user-pass') {
    $form['name']['#prefix'] = '<div class="form-group">';
    $form['name']['#suffix'] = '</div>';
    $form['name']['#attributes']['class'][] = 'form-control';
    $form['name']['#attributes']['placeholder'] = 'Username or Email';
    $form['actions']['submit']['#value'] = t("Submit");
    $form['actions']['submit']['#prefix'] = '<div class="form-group">';
    $form['actions']['submit']['#suffix'] = '</div>';
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-login';
  }
  if (strpos($form['#id'], 'uc-product-add-to-cart-form') !== FALSE) {
    $form['qty']['#prefix'] = '<div class="product_quantity">';
    $form['qty']['#suffix'] = '</div>';
    $form['qty']['#attributes']['class'][] = 'form-control';
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn_crt';
    $form['actions']['submit']['#prefix'] = '<div class="cart_button"><i class="fa fa-shopping-cart"></i>';
    $form['actions']['submit']['#suffix'] = '</div>';
  }
}


/**
 *
 *  End of form alter hooks
 *
 */


/**
 * Implements hook_views_pre_render().
 */
function purencool_vision_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'frontpage' && $view->current_display == 'page_1') {
    // Use some or all of the following 3 lines to remove specific
    // 'no results' behaviors
    unset($view->empty['area_text_custom']);
    unset($view->empty['node_listing_empty']);
    unset($view->empty['title']);
  }
}


/**
 *  Extra functions
 */
function _purencool_vision_access_content_type() {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    return $node->bundle();
  }
  return NULL;
}

/**
 * @param $var
 * @return string
 */
function _purencool_vision_get_url_path($var, $customId = '') {
  $path = \Drupal::request()->getRequestUri();
  $path_args = explode('/', $path);
	unset($path_args['0']);

	if ($customId == '') {
    if ($path_args[1] == '') {
      return "pnc$var-front";
    }
    else {
      return "pnc$var-" . end($path_args);
    }
  }
  else {
    return "pnc$var-" . $customId;
  }


}


/**
 * @param $imgFolder
 * @return string
 */
function demo_image_path($imgFolder) {
  global $base_url;
  $path = $base_url . '/sites/default/files/' . $imgFolder . '/';
  return $path;
}

